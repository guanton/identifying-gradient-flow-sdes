# MIT License
#
# Copyright (c) 2024 Antonio Terpin, Nicolas Lanzetti, Martin Gadea, Florian DÃ¶rfler
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# training
train:
  eval_freq: 1000 # Frequency (in epochs) for evaluating the model
  batch_size: 250 # Number of samples per gradient update
  epochs: 1000 # Total number of epochs for training
  save_locally: True # If True, plots will be saved locally.

metrics:
  wasserstein_error: 1 # Order of the Wasserstein error to be computed
  w_one_ahead: True # If True, calculate the Wasserstein one-ahead error
  w_cumulative: False # If True, calculate the Wasserstein cumulative error (all-steps-ahead)

#WandB
wandb:
  save_plots: False # If True, plots will be saved in wandb
  save_model: False # If True, model will be saved in wandb

# models
energy:
  # optimization
  optim:
    weight_decay: 0.0
    optimizer: Adam # Choice of optimizer for updating model parameters
    
    # Adam optimizer parameters
    lr: 0.001
    beta1: 0.9
    beta2: 0.999
    eps: 0.00000001

    grad_clip: 10.0 # Gradient clipping threshold

  # model architecture
  model:
    layers: [64, 64] # Number of units in each layer of the neural network

  # feature selection for linear parametrization
  linear:
    reg: 0.00 # Regularization term for the linear parametrization
    features:
      polynomials:
        degree: 4 # Degree of polynomial features
        sines: False # Enable sine functions of the polynomials as additional features
        cosines: False # Enable cosine functions of the polynomials as additional features
      rbfs: 
        n_centers_per_dim: 10 # Number of radial basis function centers per dimension
        domain: [-4, 4] # Domain for radial basis functions
        sigma: 0.5 # Spread (sigma) for radial basis functions
        # types of rbfs to include
        types: [
           'linear',
          # 'thin_plate_spline',
          # 'cubic',
          # 'quintic',
          'const',
          # 'multiquadric',
          # 'inverse_multiquadric',
          # 'inverse_quadratic'
        ]
      